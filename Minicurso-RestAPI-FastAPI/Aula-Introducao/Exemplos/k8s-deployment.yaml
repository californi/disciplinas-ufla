# Namespace para o projeto
apiVersion: v1
kind: Namespace
metadata:
  name: minicurso-api
---
# ConfigMap para configurações
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: minicurso-api
data:
  DATABASE_URL: "postgresql://user:password@postgres-service:5432/microservices"
  REDIS_URL: "redis://redis-service:6379"
---
# Secret para dados sensíveis
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: minicurso-api
type: Opaque
data:
  database-password: cGFzc3dvcmQ=  # password em base64
---
# Deployment para a API de Usuários
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-api
  namespace: minicurso-api
  labels:
    app: user-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: user-api
  template:
    metadata:
      labels:
        app: user-api
    spec:
      containers:
      - name: user-api
        image: user-api:latest
        ports:
        - containerPort: 8000
        env:
        - name: SERVICE_NAME
          value: "user-api"
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DATABASE_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Service para a API de Usuários
apiVersion: v1
kind: Service
metadata:
  name: user-api-service
  namespace: minicurso-api
spec:
  selector:
    app: user-api
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP
---
# Deployment para a API de Produtos
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-api
  namespace: minicurso-api
  labels:
    app: product-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-api
  template:
    metadata:
      labels:
        app: product-api
    spec:
      containers:
      - name: product-api
        image: product-api:latest
        ports:
        - containerPort: 8000
        env:
        - name: SERVICE_NAME
          value: "product-api"
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DATABASE_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Service para a API de Produtos
apiVersion: v1
kind: Service
metadata:
  name: product-api-service
  namespace: minicurso-api
spec:
  selector:
    app: product-api
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP
---
# Deployment para o API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: minicurso-api
  labels:
    app: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: api-gateway:latest
        ports:
        - containerPort: 8000
        env:
        - name: SERVICE_NAME
          value: "api-gateway"
        - name: USER_SERVICE_URL
          value: "http://user-api-service:80"
        - name: PRODUCT_SERVICE_URL
          value: "http://product-api-service:80"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Service para o API Gateway
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: minicurso-api
spec:
  selector:
    app: api-gateway
  ports:
  - port: 80
    targetPort: 8000
  type: LoadBalancer
---
# Deployment para PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: minicurso-api
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "microservices"
        - name: POSTGRES_USER
          value: "user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: database-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# Service para PostgreSQL
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: minicurso-api
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# PersistentVolumeClaim para PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: minicurso-api
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Deployment para Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: minicurso-api
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
# Service para Redis
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: minicurso-api
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Ingress para expor a API
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
  namespace: minicurso-api
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: api.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 80
---
# HorizontalPodAutoscaler para auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-api-hpa
  namespace: minicurso-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
